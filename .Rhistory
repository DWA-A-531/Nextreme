install.packages("D:/USER/shehu/Nextreme/Nextreme_1.2.0.tar.gz", repos = NULL, type = "source")
# Überprüfung der Struktur der 5-Minuten-Zeitreihe
str(Regendaten_01684)
data("Regendaten_01684")
# die ersten 10 Zeilen der Regendaten_01684 zeigen
head(Regendaten_01684, 10)
data("Regendaten_01684")
# die ersten 10 Zeilen der Regendaten_01684 zeigen
head(Regendaten_01684, 10)
library(Nextreme)
data("Regendaten_01684")
# die ersten 10 Zeilen der Regendaten_01684 zeigen
head(Regendaten_01684, 10)
# die letzten 10 Zeilen der Regendaten_01684 zeigen
tail(Regendaten_01684, 10)
# Überprüfung der Struktur der 5-Minuten-Zeitreihe
str(Regendaten_01684)
# Überprüfung, ob die Datumdaten kontinuierlich sind
unique(diff(Regendaten_01684$Datum))
# Überprüfung des Wertebereichs der  RH
range(Regendaten_01684$RH, na.rm=T)
Goerlitz_maxSerie = jaehrliche_maxSerie(Regendaten_01684, Dauern = c(5, 10, 15,30,60,120,360,720,1440, 2880, 4320, 10080), DSDmin=240, Intervall = 5, SerieTyp = "INT")
print(Goerlitz_maxSerie)
unlink("vignettes/Einfuehrung_Nextreme_cache", recursive = TRUE)
## -----------------------------------------------------------------------------
library("Nextreme")
## -----------------------------------------------------------------------------
library("lubridate")
library("lmomco")
library("terra")
library("Nextreme")
## -----------------------------------------------------------------------------
data("Regendaten_01684")
# die ersten 10 Zeilen der Regendaten_01684 zeigen
head(Regendaten_01684, 10)
# die letzten 10 Zeilen der Regendaten_01684 zeigen
tail(Regendaten_01684, 10)
# Überprüfung der Struktur der 5-Minuten-Zeitreihe
str(Regendaten_01684)
# Überprüfung, ob die Datumdaten kontinuierlich sind
unique(diff(Regendaten_01684$Datum))
# Überprüfung des Wertebereichs der  RH
range(Regendaten_01684$RH, na.rm=T)
Goerlitz_maxSerie = jaehrliche_maxSerie(Regendaten_01684, Dauern = c(5, 10, 15,30,60,120,360,720,1440, 2880, 4320, 10080), DSDmin=240, Intervall = 5, SerieTyp = "INT")
lubridate::seq
seq()
?seq
devtools::load_all(".")
head(Regendaten_01684)
jaehrlicheSerie_VOL = jaehrliche_maxSerie(Regendaten_01684, SerieTyp="VOL")
jaehrlicheSerie_VOL
jaehrliche_maxSerie
korrigierteSerie = Intervallkorrektur(Serie=Goerlitz_iN)
korrigierteSerie
Station = data.frame(Stations_id = 01684, geoBreite = 51.1621, geoLaenge = 14.9506)
Kostra_Hn = Kostra2020_hN_Schaetzung(Standorte = Station, Dauern = c(5,10,15), Tn=c(50,100), Unsicherheit=F)
rdwd::data("gridIndex")
rdwd::data("gridIndex")
devtools::load_all(".")
Station = data.frame(Stations_id = 01684, geoBreite = 51.1621, geoLaenge = 14.9506)
kostraParameter = Kostra2020_Parameter(Standorte = Station, Temp_Pfad = "d:\\USER\\shehu\\" )
kostraParameter
Kostra_Hn = Kostra2020_hN_Schaetzung(Standorte = Station, Dauern = c(5,10,15), Tn=c(50,100), Unsicherheit=F, Temp_Pfad = "d:\\USER\\shehu\\")
print(Kostra_Hn)
extremParameter = Parameter_Schaetzung(Serie=Goerlitz_iN,Dauern=c(5, 10, 15,30,60,120,360,720,1440, 2880, 4320, 10080), methGEV="GEV", formTyp="FIX", Gamma=-0.01)
extremParameter
extremParameter = Parameter_Schaetzung(Serie=Goerlitz_iN,Dauern=c(5, 10, 15,30,60,120,360,720,1440, 2880, 4320, 10080), methGEV="GUM")
extremParameter
extremParameter = Parameter_Schaetzung(Serie=Goerlitz_iN[,-(1:4)],Dauern=c(60,120,360,720,1440, 2880, 4320, 10080), methGEV="GEV", formTyp="CON")
extremParameter
IDF_Tabelle = Quantil_Schaetzung(extrem.Parameter=extremParameter, Dauern=c(5, 10, 15,30,60,120,360,720,1440, 2880, 4320, 10080), Tn=c(1,5,10,20,50,100), methGEV="GEV", SerieTyp="INT")
devtools::load_all(".")
IDF_Tabelle = Quantil_Schaetzung(extrem.Parameter=extremParameter, Dauern=c(5, 10, 15,30,60,120,360,720,1440, 2880, 4320, 10080), Tn=c(1,5,10,20,50,100), methGEV="GEV", SerieTyp="INT")
devtools::load_all(".")
IDF_Tabelle = Quantil_Schaetzung(extrem.Parameter=extremParameter, Dauern=c(5, 10, 15,30,60,120,360,720,1440, 2880, 4320, 10080), Tn=c(1,5,10,20,50,100), methGEV="GEV", SerieTyp="INT")
IDF_Tabelle
DDF_Tabelle = Quantil_Schaetzung(extrem.Parameter=extremParameter, Dauern=c(60,120,360,720,1440, 2880, 4320, 10080), Tn=c(1,5,10,20,50,100), methGEV="GEV", SerieTyp="VOL")
DDF_Tabelle
library(data.table)
Ta_Ereignis = Tn_Schaetzung(extremParameter, Dauern = 360, hN= 58.6, methGEV="GEV")
devtools::load_all(".")
Ta_Ereignis = Tn_Schaetzung(extremParameter, Dauern = 360, hN= 58.6, methGEV="GEV")
Ta_Ereignis
Ta_Ereignis = Tn_Schaetzung(extremParameter, Dauern = c(60,120,360), hN= c(40,40,40), methGEV="GEV")
Ta_Ereignis
Ta_Ereignis = Tn_Schaetzung(extremParameter, Dauern = c(240,720,1440), hN= c(50,90,95), methGEV="GEV")
Ta_Ereignis
Unsicherheit  = Unsicherheit_Schaetzung(Goerlitz_iN,Tn=100, nBoots =50, rSeed=15, SerieTyp="VOL" )
HN_KI  = Unsicherheit$QUA_INFO
dauern = c(5, 10, 15,30,60,120,360,720,1440, 2880, 4320, 10080)
library(scales)
plot(dauern, HN_KI$Mittelwert["100",], type="l", lwd=2, lty=1, log="xy", ylim=range(HN_KI$`95%`["100",], HN_KI$`5%`["100",]), col="royalblue",
ylab="Hn [mm]", xlab="Dauer [min]", main = "Station Goerlitz")
polygon(c(dauern, rev(dauern)), c(HN_KI$`5%`["100",], rev(HN_KI$`95%`["100",])), col=alpha("royalblue",0.5), border=NA)
legend("topleft", c("95%KI", "Mittelwert"),  col=c(alpha("royalblue",0.5), "royalblue"), lty=c(1, 1), lwd=c(10,2), title = "Legende", bty="n")
barplot(unlist(HN_KI$rel.Unsicherheit["100",]), ylab=expression('100 x(K'[o]~-~K[u]~')/K'),xlab="Dauern [min]",main="Tn=100Jahre", col = hcl.colors(12, palette = "viridis"))
Unsicherheit  = Unsicherheit_Schaetzung(Goerlitz_iN,Tn=c(20,50,100), nBoots =100, rSeed=15, SerieTyp="VOL")
PAR_KI  = Unsicherheit$PAR_INFO
hN_KI   = Unsicherheit$QUA_INFO
barplot(as.matrix(hN_KI$rel.Unsicherheit), beside=T, ylab=expression('100 x(K'[o]~-~K[u]~')/K'),ylim=c(0,50), xaxt='n', xlab="Dauern [min]",main="Station Goerlitz", col=c("royalblue1","royalblue3", "royalblue4"))
legend("top",legend=rownames(hN_KI$rel.Unsicherheit), fill = c("royalblue1","royalblue3", "royalblue4"), bty="n", title="Ta")
# Alternativ Darstellung barplot(as.matrix(t(hN_KI$rel.Unsicherheit)), beside=T, ylab=expression('100 x(K'[o]~-~K[u]~')/K'),ylim=c(0,50), xaxt='n',main="Station Goerlitz", col=hcl.colors(12, palette = "viridis"))
#' axis(1, at = c(7, 20, 34), rownames(hN_KI$rel.Unsicherheit))
#' legend_order <- matrix(1:12,ncol=6,byrow = TRUE)
#' legend("top",legend=dauern[legend_order], fill=hcl.colors(12, palette = "viridis")[legend_order],  bty="n",title="Daurn [min]", cex=0.6, ncol=6)
barplot(as.matrix(t(hN_KI$rel.Unsicherheit)), beside=T, ylab=expression('100 x(K'[o]~-~K[u]~')/K'),ylim=c(0,50), xaxt='n',main="Station Goerlitz", col=hcl.colors(12, palette = "viridis"))
axis(1, at = c(7, 20, 34), rownames(hN_KI$rel.Unsicherheit))
legend_order <- matrix(1:12,ncol=6,byrow = TRUE)
legend("top",legend=dauern[legend_order], fill=hcl.colors(12, palette = "viridis")[legend_order],  bty="n",title="Daurn [min]", cex=0.6, ncol=6)
ShapeFix = 0.1 #(nach Koutsoyiannis 2008)
kappaFix = ShapeFix * -1 # vorzeichenwechsel aufgrund unterschiedl. Formeln beachten!
pargev2(lmomco::lmoms(1:10),kappa= kappaFix )$para
install.packages("data.table")
n1=50;n2=50;m1=10;m2=20
Sensor = c(rep("analog",n1),rep("digital",n2)); Wert = c(rnorm(n1,m1),rnorm(n2,m2))
par(mfrow=c(2,1))
data.table(Wert,Sprung_Elimination(Wert,Sensor))[,{plot(Wert,pch=1,cex=2);points(SerieNeu,col=2,pch=15)}]
Sprung_Elimination(Wert,Sensor)
plot(Sprung_Elimination(Wert,Sensor)$SerieNeu, Sensor$Wert)
Sprung_Elimination(Wert,Sensor)$SerieNeu
Wert
n1=30;n2=40;n3=30;m1=30;m2=20;m3=40
Sensor = c(rep("analog1",n1),rep("analog2",n2),rep("digital",n3)); Wert = c(rnorm(n1,m1),rnorm(n2,m2),rnorm(n3,m3))
Sprung_Elimination(Wert,Sensor)
Sensor
Sensor = c(rep("analog",n1),rep("analog",n2),rep("digital",n3))
Wert = c(rnorm(n1,m1),rnorm(n2,m2),rnorm(n3,m3))
Sprung_Elimination(Wert,Sensor)
wechselDatum = as.Date("1992-12-31", format=c("%Y-%m-%d"))
wechselDatum
korrigierte_hN = Sprung_Korrektur(Goerlitz_hN, wechselDatum)
korrigierte_hN
library(evd)
n=100
set.seed(1234)
xStat   = rgev(n,10,2,0.1)                                             # synthetische GEV-verteilte Daten, stationaer
xTrend  = rgev(n,10,2,0.1) + 1:n*0.05                                  # synthetische GEV-verteilte Daten, mit Trend
xSprung = c(rgev(n/2,10,1,0.1),rgev(n/2,20,2,0.1))                     # synthetische GEV-verteilte Daten, mit Sprung
xTrendSprung = c(rgev(n/2,10,2,0.1),rgev(n/2,20,2,0.1)) + (1:n)*0.05   # synthetische GEV-verteilte Daten, mit Trend und Sprung
X = data.frame(Jahr=1:n,Sensor=factor(c(rep("analog",n/2),rep("digital",n/2))),xStat,xTrend,xSprung,xTrendSprung
)
X
Trend_vs_Sprung(Zeit=X[,"Jahr"],Serienwerte=X[,"xStat"],Sensor=X[,"Sensor"])
Trend_vs_Sprung(Zeit=X[,"Jahr"],Serienwerte=X[,"xTrend"],Sensor=X[,"Sensor"])
Trend_vs_Sprung(Zeit=X[,"Jahr"],Serienwerte=X[,"xSprung"],Sensor=X[,"Sensor"])
Trend_vs_Sprung(Zeit=X[,"Jahr"],Serienwerte=X[,"xTrendSprung"],Sensor=X[,"Sensor"])
install.packages("D:/USER/shehu/Nextreme/Nextreme_1.2.1.tar.gz", repos = NULL, type = "source")
devtools::document()
devtools::run_examples()
devtools::run_examples()
devtools::check()
n1=50;n2=50;m1=10;m2=20
Sensor = c(rep("analog",n1),rep("digital",n2)); Wert = c(rnorm(n1,m1),rnorm(n2,m2))
prung_Elimination(Wert,Sensor)
Sprung_Elimination(Wert,Sensor)
help("Tn_Schaetzung")
help("Trend_vs_Sprung")
devtools::check()
devtools::check()
devtools::run_examples()
packageReport = devtools::check()
packageReport$warnings
devtools::load_all(".")
load("D:/USER/shehu/Nextreme/Nextreme/data/Goerlitz_iN.rda")
View(Goerlitz_iN)
Regendaten_01684 = read.csv("v:\\xchange\\Bora\\Rpackages\\KO00010.csv", sep=";", na.strings = -99.99)
head(Regendaten_01684)
Regendaten_01684 = read.csv("v:\\xchange\\Bora\\Rpackages\\KO00010.csv", sep=";", header=F, na.strings = -99.99)
Regendaten_01684[,1] = as.POSIXct(Regendaten_01684[,1], format="%Y%m%d%H%M", origin="1950-01-01 00:00", tz="UTC")
help("jaehrliche_maxSerie")
names(Regendaten_01684) = c("Datum", "RH")
head(Regendaten_01684)
Regendaten_01684 = read.csv("v:\\xchange\\Bora\\Rpackages\\KO00010.csv", sep=";", header=F, na.strings = -99.99)
Regendaten_01684[,1] = as.POSIXct(as.character(Regendaten_01684[,1]), format="%Y%m%d%H%M", origin="1950-01-01 00:00", tz="UTC")
names(Regendaten_01684) = c("Datum", "RH")
head(Regendaten_01684)
Regendaten_01684$RH[which(Regendaten_01684$RH<0)] = NA
head(Regendaten_01684)
usethis::use_data(Regendaten_01684, overwrite = TRUE)
devtools::load_all(".")
Goerlitz_iN = jaehrliche_maxSerie(
Regendaten_01684,
Dauern = c(5, 10, 15, 30, 60, 120, 360, 720, 1440, 2880, 4320, 10080),
Intervall = 5,
DSDmin = 240,
SerieTyp = "INT",
report = ""
)
Goerlitz_nN = jaehrliche_maxSerie(
Regendaten_01684,
Dauern = c(5, 10, 15, 30, 60, 120, 360, 720, 1440, 2880, 4320, 10080),
Intervall = 5,
DSDmin = 240,
SerieTyp = "VOL",
report = ""
)
Goerlitz_hN = jaehrliche_maxSerie(
Regendaten_01684,
Dauern = c(5, 10, 15, 30, 60, 120, 360, 720, 1440, 2880, 4320, 10080),
Intervall = 5,
DSDmin = 240,
SerieTyp = "VOL",
report = ""
)
Goerlitz_hN
Goerlitz_iN
load("D:/USER/shehu/Nextreme/Nextreme/data/Goerlitz_Sensoren.rda")
View(Goerlitz_Sensoren)
row.names(Goerlitz_hN)
70-42
c(rep("analog",42), rep("digital",28))
data.frame(Jahr = row.names(Goerlitz_hN), Sensor=c(rep("analog",42), rep("digital",28)))
Goerlitz_Sensoren = data.frame(Jahr = row.names(Goerlitz_hN), SensorTyp=c(rep("analog",42), rep("digital",28)))
usethis::use_data(Goerlitz_hN, overwrite = TRUE)
usethis::use_data(Goerlitz_iN, overwrite = TRUE)
usethis::use_data(Goerlitz_Sensoren, overwrite = TRUE)
load("D:/USER/shehu/Nextreme/Nextreme/data/Goerlitz_Sensoren.rda")
View(Goerlitz_Sensoren)
usethis::use_r("Regendaten_01684.R")
head(Regendaten_01684)
tail(Regendaten_01684)
usethis::use_r("Goerlitz_iN.R")
Goerlitz_iN
260/60
360/60
720/60
2880/60
48/24
4830/60
4320/60
72/24
usethis::use_r("Goerlitz_hN.R")
usethis::use_r("Goerlitz_Sensoren.R")
head(Goerlitz_Sensoren)
devtools::check()
devtools::build_manual()
rlang::last_trace()
packageReport = devtools::check()
packageReport$stdout
packageReport$stderr
packageReport$status
packageReport$errors
packageReport$warnings
usethis::use_data(Regendaten_01684, compress="xz", overwrite = TRUE)
usethis::use_data(Goerlitz_hN, compress="xz",overwrite = TRUE)
usethis::use_data(Goerlitz_iN, compress="xz",overwrite = TRUE)
usethis::use_data(Goerlitz_Sensoren, compress="xz",overwrite = TRUE)
packageReport$notes
?is
is(Goerlitz_hN, data.frame)
is(Goerlitz_hN, "dataframe")
type(Goerlitz_hN)
class(Goerlitz_hN)
is(Goerlitz_hN, "data.frame")
packageReport$description
packageReport$cran
packageReport$session_info
packageReport$test_output
packageReport$test_fail
packageReport$checkdir
packageReport$cran
gc()
usethis::use_readme_md()
usethis::use_news_md()
Sys.which("makeindex")
Sys.which("makeindex")
.libPaths("C:/Users/shehu/R/win-library/4.3")
devtools::install()
.libPaths()
devtools::build_vignettes()
usethis::use_build_ignore("vignettes")
usethis::use_build_ignore("docs")
use_build_ignore()
?usethis::use_build_ignore()
getwd()
usethis::use_build_ignore("NEWS.md")
usethis::use_build_ignore("README.md")
usethis::use_build_ignore("docs/Einfuehrung_Nextreme.html")
usethis::use_build_ignore("docs/Einfuehrung_Nextreme.pdf")
usethis::use_build_ignore("docs/Nextreme_1.2.1.pdf")
usethis::use_build_ignore("vignettes/Einfuehrung_Nextreme.pdf")
usethis::use_build_ignore("vignettes/Einfuehrung_Nextreme.html")
usethis::use_build_ignore("vignettes/Einfuehrung_Nextreme.RMD")
usethis::use_build_ignore("vignettes/Einfuehrung_Nextreme.Rmd")
install.packages("D:/USER/shehu/Nextreme/Nextreme_1.2.1.tar.gz", repos = NULL, type = "source")
devtools::build_manual(pkg = ".", path = NULL)
help(Goerlitz_iN)
library(Nextreme)
help(Goerlitz_iN)
devtools::load_all(".")
help(Goerlitz_iN)
remove.packages("Nextreme")
devtools::load_all(".")
help(Goerlitz_iN)
help(Goerlitz_iN)
head(Goerlitz_iN)
usethis::use_r("Regendaten_01684.R")
usethis::use_r("Goerlitz_iN.R")
usethis::use_r("Goerlitz_hN.R")
usethis::use_r("Goerlitz_Sensoren.R")
devtools::document()
devtools::load_all(".")
?Goerlitz_hN
?Goerlitz_iN
?Goerlitz_Sensoren
?Regendaten_01684
devtools::document()
library(Nextreme)
remove.packages("Nextreme")
devtools::build(pkg=".", path = NULL, binary=FALSE, vignettes=TRUE, manual=TRUE)
install.packages("D:/USER/shehu/Nextreme/Nextreme_1.2.1.tar.gz", repos = NULL, type = "source")
library(Nextreme)
remove.packages("Nextreme")
install.packages("D:/USER/shehu/Nextreme/Nextreme_1.2.1.tar.gz", repos = NULL, type = "source")
library(Nextreme)
?devtools::document
?devtools::document()
devtools::document()
library(Nextreme)
remove.packages("Nextreme")
install.packages("D:/USER/shehu/Nextreme/Nextreme_1.2.1.tar.gz", repos = NULL, type = "source")
install.packages("D:/USER/shehu/Nextreme/Nextreme_1.2.1.tar.gz", repos = NULL, type = "source")
