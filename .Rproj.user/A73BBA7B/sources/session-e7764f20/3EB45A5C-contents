## ----include = FALSE----------------------------------------------------------
knitr::opts_chunk$set(
  fig.width = 6,
  fig.height = 6,
  collapse = TRUE,
  comment = "#>"
)

## ----setup--------------------------------------------------------------------
library(Nextreme)

## -----------------------------------------------------------------------------
library("lubridate")
library("rdwd")
library("terra")
library("Nextreme")

## -----------------------------------------------------------------------------
Station = data.frame(Stations_id = 01684, geoBreite = 51.1621, geoLaenge = 14.9506)

## -----------------------------------------------------------------------------
DWD_5min_precip_links = selectDWD(res="5_minutes", var="precipitation", per="historical")
print(head(DWD_5min_precip_links))

## -----------------------------------------------------------------------------
filename_5min   = paste0("5minutenwerte_nieder_", formatC(Station$Stations_id, flag=0, width=5), "_")
Goerlitz_Indexe = which(grepl(filename_5min, DWD_5min_precip_links)==T)
Goerlitz_Links  = DWD_5min_precip_links[Goerlitz_Indexe]
print(head(Goerlitz_Links))# alle verfügbaren Links für 5min-Niederschlagsdaten in Goerlitz werden angezeigt

## -----------------------------------------------------------------------------
Startdatum   = strsplit(strsplit(Goerlitz_Links[1], split="/")[[1]][[12]], split="_")[[1]][4]
Startdatum   = as.POSIXct(Startdatum, "%Y%m%d", tz="UTC")
print(Startdatum)
Enddatum     = strsplit(strsplit(tail(Goerlitz_Links,1), split="/")[[1]][[12]], split="_")[[1]][5]
Enddatum     = as.POSIXct(Enddatum, "%Y%m%d", tz="UTC")
print(Enddatum)
ges.Periode  = seq(Startdatum, Enddatum, by= 5*60)

## -----------------------------------------------------------------------------
Goerlitz_Daten = data.frame(Datum=ges.Periode, RH=NA)

## -----------------------------------------------------------------------------
# Den Zielpfad angeben, in den die 5-Minuten-Daten heruntergeladen werden sollen
Zielpfad      = "D:\\DWD5min\\"
Goerlitz_DWD  = dataDWD(Goerlitz_Links, joinbf=FALSE, read=TRUE, dir=Zielpfad, tz="UTC")
Goerlitz_DWD  = do.call(rbind, Goerlitz_DWD)
rownames(Goerlitz_DWD) = NULL # um lange Link-Namen als Zeilennamen zu vermeiden

## -----------------------------------------------------------------------------
# die Bedingung prüfen, ob beide gleich sind
# Wenn False, fehlen Zeitschritte im DWD-Dataframe *Goerlitz_DWD*
# Wenn True, gibt es keine fehlenden Zeitschritte im DWD-Dataframe *Goerlitz_DWD*
print(length(which(Goerlitz_Daten$Datum%in%Goerlitz_DWD$MESS_DATUM)) == length(which( Goerlitz_DWD$MESS_DATUM %in%Goerlitz_Daten$Datum)))

## -----------------------------------------------------------------------------
# Duplikate beim Einlesen von DWD-Daten finden
doppelte.Datum  = Goerlitz_DWD$MESS_DATUM[which(duplicated(Goerlitz_DWD$MESS_DATUM)==T)]
doppelte.Indexe = which(Goerlitz_DWD$MESS_DATUM == doppelte.Datum)
# Duplikate beim Einlesen von DWD-Daten finden
print(Goerlitz_DWD[(doppelte.Indexe[1]-5): (doppelte.Indexe[1] +5),])
print(Goerlitz_DWD[(doppelte.Indexe[2]-5): (doppelte.Indexe[2] +5),])

## -----------------------------------------------------------------------------
Goerlitz_DWD = Goerlitz_DWD[-doppelte.Indexe[1],]
print(all(unique(diff(Goerlitz_DWD$MESS_DATUM))==5)==T)

## -----------------------------------------------------------------------------
RTH_05Volumen = sapply(1993:2020, function(y) sum(Goerlitz_DWD$RTH_05[which(year(Goerlitz_DWD$MESS_DATUM)==y)], na.rm=T))
print(RTH_05Volumen)
RWH_05Volumen = sapply(1993:2020, function(y) sum(Goerlitz_DWD$RWH_05[which(year(Goerlitz_DWD$MESS_DATUM)==y)], na.rm=T))
print(RWH_05Volumen)
RS_05Volumen  = sapply(1993:2020, function(y) sum(Goerlitz_DWD$RS_05[which(year(Goerlitz_DWD$MESS_DATUM)==y)], na.rm=T))
print(RS_05Volumen)

## -----------------------------------------------------------------------------
erstePeriode = Goerlitz_DWD[which(is.na(Goerlitz_DWD$RWH_05)==F),]
print(range(erstePeriode$MESS_DATUM))
zweitePeriode = Goerlitz_DWD[which(is.na(Goerlitz_DWD$RS_05)==F),]
print(range(zweitePeriode$MESS_DATUM))
Goerlitz_Daten[which(Goerlitz_Daten$Datum%in%erstePeriode$MESS_DATUM),2]  = erstePeriode$RWH_05[which( erstePeriode$MESS_DATUM %in%Goerlitz_Daten$Datum)]
Goerlitz_Daten[which(Goerlitz_Daten$Datum%in%zweitePeriode$MESS_DATUM),2] = zweitePeriode$RS_05[which( zweitePeriode$MESS_DATUM %in%Goerlitz_Daten$Datum)]
print(head(Goerlitz_Daten))
Sensor_WechselZeit = range(zweitePeriode$MESS_DATUM)[1]

## -----------------------------------------------------------------------------
summary(Goerlitz_Daten$RH[which(Goerlitz_Daten>0)])
jaehrlicheVolum = sapply(1993:2020, function(y) sum(Goerlitz_Daten$RH[which(year(Goerlitz_Daten$Datum)==y)], na.rm=T))
print(jaehrlicheVolum)
jaehrliche.MaxInt = sapply(1993:2020, function(y) max(Goerlitz_Daten$RH[which(year(Goerlitz_Daten$Datum)==y)], na.rm=T))
print(jaehrliche.MaxInt)
jaehrliche.Beobachtungen  = sapply(1993:2020, function(y) length(which(is.na(Goerlitz_Daten$RH[which(year(Goerlitz_Daten$Datum)==y)])==F)))
print(jaehrliche.Beobachtungen)

## -----------------------------------------------------------------------------
Goerlitz_maxSerie = jaehrliche_maxSerie(Goerlitz_Daten, Dauern = c(5, 10, 15,30,60,120,360,720,1440, 2880, 4320, 10080), DSDmin=240, Intervall = 5, SerieTyp = "INT")
print(Goerlitz_maxSerie)

## -----------------------------------------------------------------------------
Goerlitz_maxSerie    = Intervallkorrektur(Goerlitz_maxSerie, Intervall = 5)

## -----------------------------------------------------------------------------
WechselDatum = as.Date(Sensor_WechselZeit)
Goerlitz_maxSerie_korrigiert    = Sprung_Korrektur(Goerlitz_maxSerie, WechselDatum)
# Die Differenz vor und nach der Funktion sprungKorrektur() überprüfen.
print(round(Goerlitz_maxSerie_korrigiert-Goerlitz_maxSerie,0))

## -----------------------------------------------------------------------------
N_pars      = Parameter_Schaetzung(Goerlitz_maxSerie, Dauern = c(5, 10, 15,30,60,120,360,720,1440, 2880, 4320, 10080), methGEV="GEV", formTyp = "FIX", Gamma = -0.1)
print(N_pars)

## -----------------------------------------------------------------------------
H_quas      = hN_Schaetzung(N_pars, Dauern = c(5, 10, 15,30,60,120,360,720,1440, 2880, 4320, 10080),Tn =c(2,5,10,20,50,100), methGEV="GEV",SerieTyp = "VOL")
print(H_quas)

## -----------------------------------------------------------------------------
KI          = Unsicherheit_Schaetzung(Goerlitz_maxSerie,
                                  Tn =c(2,5,10,20,50,100),
                                  Dauern = c(5, 10, 15,30,60,120,360,720,1440, 2880, 4320, 10080),
                                  methGEV="GEV",
                                  formTyp = "FIX",
                                  Gamma=-0.1,
                                  nBoots = 100,
                                  rSeed = 1232,
                                  SerieTyp = "VOL",
                                  Konfidenzgrenzen  = c(0.025,0.975))
# Zugriff auf die Parameterinformationen
PAR_KI      = KI$PAR_INFO
# Zugriff auf die Quantils Informationen
HN_KI       = KI$QUA_INFO

## ----echo=TRUE, eval=TRUE, include=TRUE---------------------------------------
RegenDauern = c(5, 10, 15,30,60,120,360,720,1440, 2880, 4320, 10080)
Tn_Farbe    = rev(hcl.colors(6, palette = "viridis"))
plot(RegenDauern, H_quas["2",], type="l", lwd=2, lty=1, log="xy", col=Tn_Farbe[1], ylab="hN [mm]", ylim=range(H_quas), xlab="Dauer [min]", main = "Station 01684")
lines(RegenDauern, H_quas["5",],  lwd=2, col=Tn_Farbe[2])
lines(RegenDauern, H_quas["10",], lwd=2, col=Tn_Farbe[3])
lines(RegenDauern, H_quas["20",], lwd=2, col=Tn_Farbe[4])
lines(RegenDauern, H_quas["50",], lwd=2, col=Tn_Farbe[5])
lines(RegenDauern, H_quas["100",],lwd=2, col=Tn_Farbe[6])
legend("bottomright", legend = c(2,5,10,20,50,100),lty=1, lwd=3, col=Tn_Farbe, cex=0.8, title="Tn", horiz=T, bty="n")

## ----echo=TRUE, eval=TRUE, include=TRUE---------------------------------------
RegenDauern = c(5, 10, 15,30,60,120,360,720,1440, 2880, 4320, 10080)
plot(RegenDauern, H_quas["100",], type="l", lwd=2, lty=2, log="xy", ylim=range(HN_KI$`97.5%`["100",], HN_KI$`2.5%`["100",]), col="red",
     ylab="hN [mm]", xlab="Dauer [min]", main = "Station 01684")
polygon(c(RegenDauern, rev(RegenDauern)), c(HN_KI$`2.5%`["100",], rev(HN_KI$`97.5%`["100",])), col="royalblue", border=NA)
lines(RegenDauern, HN_KI$Mittelwert["100",], type="l", col="royalblue4", lwd=2)
lines(RegenDauern, H_quas["100",], type="l", col="red", lwd=2, lty=2)
legend("topleft", c("95%KI", "Mittelwert", "lokale Schätzung"),  col=c("royalblue", "royalblue4", "red"), lty=c(1, 1, 2), lwd=c(10,2,2), title = "Legende", bty="n")

## ----echo=TRUE, eval=TRUE, include=TRUE---------------------------------------
KI = round(HN_KI$rel.Unsicherheit,2)
# Option 1
barplot(as.matrix(KI), col=Tn_Farbe, ylab="KI [%]",  xlab="Dauer [min]", main = "Station 01684")
legend("top", legend = c(2,5,10,20,50,100), fill=Tn_Farbe, cex=0.8, title="Tn", horiz=T, bty="n")
# Option 2
barplot(as.matrix(KI),col=Tn_Farbe, beside=T, ylim=c(0,50), ylab="KI [%]", xlab="Dauer [min]", main = "Station 01684")
legend("top", legend = c(2,5,10,20,50,100), fill=Tn_Farbe, cex=0.8, title="Tn", horiz=T, bty="n")
# Option 3
Dauer_Farbe = hcl.colors(dim(KI)[2], "blues", rev = T)
barplot(as.matrix(t(KI)),col=Dauer_Farbe, beside=T, ylim=c(0,60), ylab="KI [%]", xlab="Tn", main = "Station 01684")
legend("top", legend = RegenDauern, fill=Dauer_Farbe, cex=0.8, title="Dauer (min)",  bty="n", ncol=6)


## ----echo=TRUE, eval=TRUE, include=TRUE---------------------------------------
Hn_Tn        = Tn_Schaetzung(N_pars,Dauern = c(5, 10, 60),
                            hN   = c(15, 20, 30),
                            methGEV="GEV")
print(Hn_Tn)


## -----------------------------------------------------------------------------
Tn = c(2,5,10,20,50,100)
Dauern = c(5, 10, 15, 30, 60, 120, 360, 720, 1440, 2880, 4320, 10080)
Station = data.frame(Stations_id = 01684, geoBreite = 51.1621, geoLaenge = 14.9506)
H_quas_Kostra = Kostra2020_hN_Schaetzung(Standorte = Station, Dauern=Dauern, Tn =Tn, Temp_Pfad = "./", Unsicherheit=T)
# Zugang zu den Regenhöhen und formatiert sie so, dass sie der zuvor geschätzten Tabelle H_quas entsprechen.
Hn_Kostra = H_quas_Kostra$Kostra_HN
print(Hn_Kostra)
Hn_Kostra = matrix(unlist(Hn_Kostra[1,-(1:3)]), nrow = 6, ncol = 12, byrow=F)
Hn_Kostra = as.data.frame(Hn_Kostra)
rownames(Hn_Kostra) = Tn
names(Hn_Kostra) = Dauern

# Zugang zu den Unsicherheiten und formatiert sie so, dass sie der zuvor geschätzten Tabelle H_quas entsprechen.
UC_Kostra = H_quas_Kostra$Kostra_UC
print(UC_Kostra)
UC_Kostra = matrix(unlist(UC_Kostra[1,-(1:3)]), nrow = 6, ncol = 12, byrow=F)
UC_Kostra = as.data.frame(UC_Kostra)
rownames(UC_Kostra) = Tn
names(UC_Kostra) = Dauern

# Da die Kostra-DWD-2020 Unsicherheiten in Prozent angegeben sind, kann die obere und untere Konfidenzgrenze wie folgt berechnet werden:
Hn_Kostra_Ku =  Hn_Kostra - round(UC_Kostra*Hn_Kostra/100,2) # untere Grenze
Hn_Kostra_Ko =  Hn_Kostra + round(UC_Kostra*Hn_Kostra/100,2) # obere Grenze

## ----echo=TRUE, eval=TRUE, include=TRUE---------------------------------------
RegenDauern = c(5, 10, 15,30,60,120,360,720,1440, 2880, 4320, 10080)
plot(RegenDauern, H_quas["100",], type="l", lwd=2, lty=2, log="xy", ylim=range(HN_KI$`97.5%`["100",], HN_KI$`2.5%`["100",], Hn_Kostra_Ku["100",], Hn_Kostra_Ko["100",]), col="red",
     ylab="hN [mm]", xlab="Dauer [min]", main = "Station 01684, Tn=100")
polygon(c(RegenDauern, rev(RegenDauern)), c(Hn_Kostra_Ku["100",], rev(Hn_Kostra_Ko["100",])), col="lightgrey", border=NA)
polygon(c(RegenDauern, rev(RegenDauern)), c(HN_KI$`2.5%`["100",], rev(HN_KI$`97.5%`["100",])), col="royalblue", border=NA)
lines(RegenDauern, HN_KI$Mittelwert["100",], type="l", col="royalblue4", lwd=2)
lines(RegenDauern, H_quas["100",], type="l", col="red", lwd=2, lty=2)
lines(RegenDauern, Hn_Kostra["100",], type="l", col="black", lwd=2, lty=2)

legend("topleft", c("lokale - 95%KI", "lokale Mittelwert", "lokale Hn", "Unsicherheitbereich Kostra-DWD-2020",  "Kostra-DWD-2020"),  col=c("royalblue", "royalblue4", "red", "lightgrey", "black"), lty=c(1, 1, 2, 1, 2), lwd=c(10,2,2, 10, 2), title = "Legende", bty="n")

## ----echo=TRUE, eval=TRUE, include=TRUE---------------------------------------
plot(Tn, H_quas[,"60"], type="l", lwd=2, lty=2, log="x", ylim=range(15, 70), col="red",
     ylab="hN [mm]", xlab="Tn", main = "Station 01684, D=60min")
polygon(c(Tn, rev(Tn)), c(Hn_Kostra_Ku[,"60"], rev(Hn_Kostra_Ko[,"60"])), col="lightgrey", border=NA)
polygon(c(Tn, rev(Tn)), c(HN_KI$`2.5%`[,"60"], rev(HN_KI$`97.5%`[,"60"])), col="royalblue", border=NA)
lines(Tn, HN_KI$Mittelwert[,"60"], type="l", col="royalblue4", lwd=2)
lines(Tn, H_quas[,"60"], type="l", col="red", lwd=2, lty=2)
lines(Tn, Hn_Kostra[,"60"], type="l", col="black", lwd=2, lty=2)
legend("topleft", c("lokale - 95%KI", "lokale Mittelwert", "lokale Hn", "Unsicherheitbereich Kostra-DWD-2020",  "Kostra-DWD-2020"),  col=c("royalblue", "royalblue4", "red", "lightgrey", "black"), lty=c(1, 1, 2, 1, 2), lwd=c(10,2,2, 10, 2), title = "Legende", bty="n")

## ----echo=TRUE, eval=TRUE, include=TRUE---------------------------------------
kostraParameter    = Kostra2020_Parameter(Standorte = Station )
Hn_Tn_Kostra       = Tn_Schaetzung(kostraParameter, Dauern = c(5, 10, 60),
                            hN   = c(15, 20, 30), # values have to be in mm
                            methGEV="GEV")
print(Hn_Tn_Kostra)


